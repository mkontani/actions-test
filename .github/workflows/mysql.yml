name: MySQL Service Example

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  container-job:
    runs-on: ubuntu-latest
    
    # runs all of the steps inside the specified continer rather than on the VM host.  
    # Because of this the network configuration changes from host based network to a container network.
    container:
      image: docker

    services:
      mysql:
        image: mysql
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_ROOT_PASSWORD: 'root'
        ports:
        - 3306/tcp

    steps:
    - uses: actions/checkout@v1     
    - run: docker run -it node npm ci
      working-directory: ./mysql
    - name: cli query test
      run: |
        docker run -it --rm mysql mysql -P${{ job.services.mysql.ports[3306] }} -hmysql -uroot -proot -e 'CREATE DATABASE sampledb;'
      working-directory: ./mysql
    - run: docker run -it --rm node npm start
      working-directory: ./mysql
      env:
        # use mysql for the host here because we have specified a container for the job.
        # If we were running the job on the VM this would be localhost
        MYSQL_HOST: mysql
        MYSQL_PORT: ${{ job.services.mysql.ports[3306] }}

# Runs all steps on the VM
# The service containers will use host port binding instead of container networking so you access them via localhost rather than the service name
  vm-job:
    runs-on: ubuntu-latest

# MySQL Server is built in images. So use VM's insterd of container with service.
# Software in VM for github actions: https://help.github.com/en/articles/software-in-virtual-environments-for-github-actions
#    services:
#      mysql:
#        image: mysql:5.7
#        env:
#          MYSQL_ROOT_PASSWORD: ''
#          MYSQL_ALLOW_EMPTY_PASSWORD: yes
#        ports:
#        # will assign a random free host port
#        - 3306/tcp

    steps:
    - name: cli query test
      run: |
        mysql -uroot -proot -e 'SHOW DATABASES;'
        mysql -uroot -proot -e 'CREATE DATABASE IF NOT EXISTS sampledb;'
    - uses: actions/checkout@v1     
    - run: npm ci
      working-directory: ./mysql
    - run: npm start
      working-directory: ./mysql
      env:
        # use localhost for the host here because we have specified a container for the job.
        # If we were running the job on the VM this would be mysql
        MYSQL_HOST: localhost
        MYSQL_PORT: ${{ job.services.mysql.ports[3306] }} # get randomly assigned published port
